service: websocket-example

custom:
  stage: ${opt:stage, 'dev'}

provider:
  name: aws
  runtime: nodejs14.x

  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ""
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:custom.stage}
    CHAT_TABLE:
      Ref: ChatTable

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        Fn::GetAtt:
          - ChatTable
          - Arn

functions:
  websocket:
    handler: src/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  startChat:
    handler: src/startChat.handler
    events:
      - websocket:
          route: startChat

  connectToChat:
    handler: src/connectToChat.handler
    events:
      - websocket:
          route: connectToChat

  message:
    handler: src/message.handler
    events:
      - websocket:
          route: message

resources:
  Resources:
    ChatTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: chatID
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: chatID
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
